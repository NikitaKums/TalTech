// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryNameId");

                    b.Property<int?>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryNameId");

                    b.HasIndex("ShopId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentBodyId");

                    b.Property<int>("CommentTitleId");

                    b.Property<int>("ProductId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("CommentBodyId");

                    b.HasIndex("CommentTitleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Defect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DefectDescriptionId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("DefectDescriptionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aadress");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("ShopId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ShopId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InventoryCreationTime");

                    b.Property<int>("InventoryDescriptionId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("InventoryDescriptionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Domain.ManuFacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManuFacturerAadressId");

                    b.Property<int>("ManuFacturerNameId");

                    b.Property<int>("ManuFacturerPhoneNumberId");

                    b.HasKey("Id");

                    b.HasIndex("ManuFacturerAadressId");

                    b.HasIndex("ManuFacturerNameId");

                    b.HasIndex("ManuFacturerPhoneNumberId");

                    b.ToTable("ManuFacturers");
                });

            modelBuilder.Entity("Domain.MultiLangString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value")
                        .HasMaxLength(10240);

                    b.HasKey("Id");

                    b.ToTable("MultiLangStrings");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderCreationTime");

                    b.Property<int>("OrderDescriptionId");

                    b.Property<int>("ShipperId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("OrderDescriptionId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("ShopId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("InventoryId");

                    b.Property<int>("ManuFacturerId");

                    b.Property<int>("PercentageAddedToBuyPrice");

                    b.Property<int>("ProductLengthId");

                    b.Property<int>("ProductManuFacturerItemCodeId");

                    b.Property<int>("ProductProductNameId");

                    b.Property<int>("ProductShopCodeId");

                    b.Property<int>("ProductWeightId");

                    b.Property<int>("Quantity");

                    b.Property<decimal?>("SellPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManuFacturerId");

                    b.HasIndex("ProductLengthId");

                    b.HasIndex("ProductManuFacturerItemCodeId");

                    b.HasIndex("ProductProductNameId");

                    b.HasIndex("ProductShopCodeId");

                    b.HasIndex("ProductWeightId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductInCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsInCategory");
                });

            modelBuilder.Entity("Domain.ProductInOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("ProductInOrderPlacingTime");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsInOrder");
                });

            modelBuilder.Entity("Domain.ProductReturned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("ProductReturnedTime");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReturnId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ProductsReturned");
                });

            modelBuilder.Entity("Domain.ProductSold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("ProductSoldTime");

                    b.Property<int>("Quantity");

                    b.Property<int>("SaleId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("ProductsSold");
                });

            modelBuilder.Entity("Domain.ProductWithDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DefectId");

                    b.Property<DateTime>("DefectRecordingTime");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsWithDefect");
                });

            modelBuilder.Entity("Domain.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ReturnDescriptionId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("ReturnDescriptionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppUserId");

                    b.Property<int>("SaleDescriptionId");

                    b.Property<DateTime>("SaleInitialCreationTime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SaleDescriptionId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Domain.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ShipperAddressId");

                    b.Property<int>("ShipperNameId");

                    b.Property<int>("ShipperPhoneNumberId");

                    b.HasKey("Id");

                    b.HasIndex("ShipperAddressId");

                    b.HasIndex("ShipperNameId");

                    b.HasIndex("ShipperPhoneNumberId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Domain.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ShopShopAddressId");

                    b.Property<int>("ShopShopContact2Id");

                    b.Property<int>("ShopShopContactId");

                    b.Property<int>("ShopShopNameId");

                    b.HasKey("Id");

                    b.HasIndex("ShopShopAddressId");

                    b.HasIndex("ShopShopContact2Id");

                    b.HasIndex("ShopShopContactId");

                    b.HasIndex("ShopShopNameId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Domain.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Culture")
                        .HasMaxLength(5);

                    b.Property<int>("MultiLangStringId");

                    b.Property<string>("Value")
                        .HasMaxLength(10240);

                    b.HasKey("Id");

                    b.HasIndex("MultiLangStringId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.HasOne("Domain.MultiLangString", "CategoryName")
                        .WithMany()
                        .HasForeignKey("CategoryNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Categories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.MultiLangString", "CommentBody")
                        .WithMany()
                        .HasForeignKey("CommentBodyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "CommentTitle")
                        .WithMany()
                        .HasForeignKey("CommentTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Comments")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Defect", b =>
                {
                    b.HasOne("Domain.MultiLangString", "Description")
                        .WithMany()
                        .HasForeignKey("DefectDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Defects")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("AppUsers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Inventory", b =>
                {
                    b.HasOne("Domain.MultiLangString", "Description")
                        .WithMany()
                        .HasForeignKey("InventoryDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Inventories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ManuFacturer", b =>
                {
                    b.HasOne("Domain.MultiLangString", "Aadress")
                        .WithMany()
                        .HasForeignKey("ManuFacturerAadressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ManuFacturerName")
                        .WithMany()
                        .HasForeignKey("ManuFacturerNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("ManuFacturerPhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.MultiLangString", "Description")
                        .WithMany()
                        .HasForeignKey("OrderDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.Inventory", "Inventory")
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.ManuFacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManuFacturerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "Length")
                        .WithMany()
                        .HasForeignKey("ProductLengthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ManuFacturerItemCode")
                        .WithMany()
                        .HasForeignKey("ProductManuFacturerItemCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ProductName")
                        .WithMany()
                        .HasForeignKey("ProductProductNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ShopCode")
                        .WithMany()
                        .HasForeignKey("ProductShopCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "Weight")
                        .WithMany()
                        .HasForeignKey("ProductWeightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductInCategory", b =>
                {
                    b.HasOne("Domain.Category", "Category")
                        .WithMany("ProductsInCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductsInCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductInOrder", b =>
                {
                    b.HasOne("Domain.Order", "Order")
                        .WithMany("ProductsInOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductsInOrder")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductReturned", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductsReturned")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Return", "Return")
                        .WithMany("ProductsReturned")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductSold", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductsSold")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Sale", "Sale")
                        .WithMany("ProductsSold")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductWithDefect", b =>
                {
                    b.HasOne("Domain.Defect", "Defect")
                        .WithMany("ProductsWithDefect")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductsWithDefect")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Return", b =>
                {
                    b.HasOne("Domain.MultiLangString", "Description")
                        .WithMany()
                        .HasForeignKey("ReturnDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Shop", "Shop")
                        .WithMany("Returns")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany("Sales")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "Description")
                        .WithMany()
                        .HasForeignKey("SaleDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Shipper", b =>
                {
                    b.HasOne("Domain.MultiLangString", "ShipperAddress")
                        .WithMany()
                        .HasForeignKey("ShipperAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ShipperName")
                        .WithMany()
                        .HasForeignKey("ShipperNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("ShipperPhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Shop", b =>
                {
                    b.HasOne("Domain.MultiLangString", "ShopAddress")
                        .WithMany()
                        .HasForeignKey("ShopShopAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ShopContact2")
                        .WithMany()
                        .HasForeignKey("ShopShopContact2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ShopContact")
                        .WithMany()
                        .HasForeignKey("ShopShopContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.MultiLangString", "ShopName")
                        .WithMany()
                        .HasForeignKey("ShopShopNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Translation", b =>
                {
                    b.HasOne("Domain.MultiLangString", "MultiLangString")
                        .WithMany("Translations")
                        .HasForeignKey("MultiLangStringId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
